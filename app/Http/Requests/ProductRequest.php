<?php

namespace App\Http\Requests;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;

class ProductRequest extends FormRequest
{
    /**
     * Indicates if the validator should stop on the first rule failure.
     *
     * @var bool
     */
    protected $stopOnFirstFailure = true;

    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    protected function failedValidation(Validator $validator)
    {
        //   parent::failedValidation($validator); // TODO: Change the autogenerated stub
        throw new HttpResponseException(response()->json([
            'status' => false,
            'status code' => 422,
            'errors' => $validator->errors()
        ], 422));
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
//            'name' => 'required|array|size:2',
            'name_en' => 'required|string|max:50',
            'name_ar' => 'required|string|max:50',
            'photo' => 'required|image|mimes:jpeg,png,jpg,gif,svg',
            'description_en' => 'nullable|string',
            'description_ar' => 'nullable|string',
            'amount' => 'required|integer|min:1',
            'price' => 'required|numeric:10',
            'active' => 'required|in:inactive,active',
            'product_category_id' => 'required|exists:product_categories,id'
        ];
    }

    public function messages(): array
    {
        return [
            // Name English
            'name_en.required' => __('validation/products.The English name is required.'),
            'name_en.string' => __('validation/products.The English name must be a string.'),
            'name_en.max' => __('validation/products.The English name may not be greater than 50 characters.'),

            // Name Arabic
            'name_ar.required' => __('validation/products.The Arabic name is required.'),
            'name_ar.string' => __('validation/products.The Arabic name must be a string.'),
            'name_ar.max' => __('validation/products.The Arabic name may not be greater than 50 characters.'),

            // Photo
            'photo.required' => __('validation/products.A photo is required.'),
            'photo.image' => __('validation/products.The photo must be an image.'),
            'photo.mimes' => __('validation/products.The photo must be of type: jpeg, png, jpg, gif, svg.'),

            // Description English
            'description_en.string' => __('validation/products.The English description must be a string.'),

            // Description Arabic
            'description_ar.string' => __('validation/products.The Arabic description must be a string.'),

            // Amount
            'amount.required' => __('validation/products.The amount is required.'),
            'amount.integer' => __('validation/products.The amount must be an integer.'),
            'amount.min' => __('validation/products.The amount must be at least 1.'),

            // Price
            'price.required' => __('validation/products.The price is required.'),
            'price.numeric' => __('validation/products.The price must be a number.'),

            // Active
            'active.required' => __('validation/products.The status is required.'),
            'active.in' => __('validation/products.The status must be either active or inactive.'),

            // Product Category ID
            'product_category_id.required' => __('validation/products.The product category ID is required.'),
            'product_category_id.exists' => __('validation/products.The selected product category does not exist.'),
        ];
    }

}

<?php

namespace App\Http\Requests;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;

class ProfileRequest extends FormRequest
{
    /**
     * Indicates if the validator should stop on the first rule failure.
     *
     * @var bool
     */
    protected $stopOnFirstFailure = true;

    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    protected function failedValidation(Validator $validator)
    {
        //   parent::failedValidation($validator); // TODO: Change the autogenerated stub
        throw new HttpResponseException(response()->json([
            'status' => false,
            'status code' => 422,
            'errors' => $validator->errors()
        ], 422));
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'firstName' => ['required', 'string', 'min:2', 'max:15'],
            'lastName' => ['required', 'string', 'min:2', 'max:15'],
            'email' => ['email', 'unique:profiles,email,' . auth()->user()->profile->id],
//            'mobile' => ['required', 'digits:10', 'unique:users,mobile,' . auth()->user()->id, 'starts_with:09'],
            'image' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'address' => ['string', 'max:150']
        ];
    }

    public function messages(): array
    {
        return [
            // First Name
            'firstName.required' => __('validation/profile.The first name is required.'),
            'firstName.string' => __('validation/profile.The first name must be a string.'),
            'firstName.min' => __('validation/profile.The first name must be at least 2 characters.'),
            'firstName.max' => __('validation/profile.The first name may not be greater than 15 characters.'),

            // Last Name
            'lastName.required' => __('validation/profile.The last name is required.'),
            'lastName.string' => __('validation/profile.The last name must be a string.'),
            'lastName.min' => __('validation/profile.The last name must be at least 2 characters.'),
            'lastName.max' => __('validation/profile.The last name may not be greater than 15 characters.'),

            // Email
            'email.email' => __('validation/profile.The email must be a valid email address.'),
            'email.unique' => __('validation/profile.The email has already been taken.'),

            // Mobile
            'mobile.required' => __('validation/profile.The mobile number is required.'),
            'mobile.digits' => __('validation/profile.The mobile number must be exactly 10 digits.'),
            'mobile.unique' => __('validation/profile.The mobile number has already been taken.'),
            'mobile.starts_with' => __('validation/profile.The mobile number must start with 09.'),

            // Image
            'image.image' => __('validation/profile.The image must be a valid image file.'),
            'image.mimes' => __('validation/profile.The image must be of type: jpeg, png, jpg, gif, svg.'),
            'image.max' => __('validation/profile.The image may not be greater than 2048 kilobytes.'),

            // Address
            'address.string' => __('validation/profile.The address must be a string.'),
            'address.max' => __('validation/profile.The address may not be greater than 150 characters.'),
        ];
    }

}

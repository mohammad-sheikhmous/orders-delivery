<?php

namespace App\Http\Requests;

use App\Rules\StrongPasswordRule;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;

class RegisterRequest extends FormRequest
{
    /**
     * Indicates if the validator should stop on the first rule failure.
     *
     * @var bool
     */
    protected $stopOnFirstFailure = true;

    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    protected function failedValidation(Validator $validator)
    {
        //   parent::failedValidation($validator); // TODO: Change the autogenerated stub
        throw new HttpResponseException(
            returnErrorJson($validator->errors()->first(), 422, 'errors')
        );
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'firstName' => ['required', 'string', 'min:2', 'max:15'],
            'lastName' => ['required', 'string', 'min:2', 'max:15'],
            'mobile' => ['required', 'digits:10', 'unique:users,mobile', 'starts_with:09'],
            'password' => ['required', 'string', 'confirmed', 'min:8', new StrongPasswordRule()],
        ];
    }

    public function messages(): array
    {
        return [
            // First Name
            'firstName.required' => __('validation/register.The first name is required.'),
            'firstName.string' => __('validation/register.The first name must be a string.'),
            'firstName.min' => __('validation/register.The first name must be at least 2 characters.'),
            'firstName.max' => __('validation/register.The first name may not be greater than 15 characters.'),

            // Last Name
            'lastName.required' => __('validation/register.The last name is required.'),
            'lastName.string' => __('validation/register.The last name must be a string.'),
            'lastName.min' => __('validation/register.The last name must be at least 2 characters.'),
            'lastName.max' => __('validation/register.The last name may not be greater than 15 characters.'),

            // Mobile
            'mobile.required' => __('validation/register.The mobile number is required.'),
            'mobile.digits' => __('validation/register.The mobile number must be exactly 10 digits.'),
            'mobile.unique' => __('validation/register.The mobile number has already been taken.'),
            'mobile.starts_with' => __('validation/register.The mobile number must start with 09.'),

            // Password
            'password.required' => __('validation/register.The password is required.'),
            'password.string' => __('validation/register.The password must be a string.'),
            'password.confirmed' => __('validation/register.The password confirmation does not match.'),
            'password.min' => __('validation/register.The password must be at least 8 characters.'),
        ];
    }
}

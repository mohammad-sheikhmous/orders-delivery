<?php

namespace App\Http\Requests;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;

class ShoppingCartRequest extends FormRequest
{
    /**
     * Indicates if the validator should stop on the first rule failure.
     *
     * @var bool
     */
    protected $stopOnFirstFailure = true;

    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    protected function failedValidation(Validator $validator)
    {
        //   parent::failedValidation($validator); // TODO: Change the autogenerated stub
        throw new HttpResponseException(response()->json([
            'status' => false,
            'status code' => 422,
            'errors' => $validator->errors()
        ], 422));
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'product_id' => 'required|exists:products,id',
            'quantity' => 'required|integer|min:1'
        ];
    }

    public function messages(): array
    {
        return [
            // Product ID
            'product_id.required' => __('validation/cart.The product is required.'),
            'product_id.exists' => __('validation/cart.The selected product does not exist.'),

            // Quantity
            'quantity.required' => __('validation/cart.The quantity is required.'),
            'quantity.integer' => __('validation/cart.The quantity must be an integer.'),
            'quantity.min' => __('validation/cart.The quantity must be at least 1.'),
        ];
    }
}

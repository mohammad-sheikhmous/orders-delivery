<?php

namespace App\Http\Requests;

use App\Rules\StrongPasswordRule;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;

class VendorRequest extends FormRequest
{
    /**
     * Indicates if the validator should stop on the first rule failure.
     *
     * @var bool
     */
    protected $stopOnFirstFailure = true;

    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    protected function failedValidation(Validator $validator)
    {
        //   parent::failedValidation($validator); // TODO: Change the autogenerated stub
        throw new HttpResponseException(
            returnErrorJson($validator->errors()->first(), 422, 'errors')
        );
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'photo' => 'required|image|mimes:jpeg,png,jpg,gif,svg',
            'name_en' => 'required|string|max:50',
            'name_ar' => 'required|string|max:50',
            'mobile' => 'required|digits:10|starts_with:09|unique:vendors,mobile,' . $this->vendor,
            'address' => 'string|max:300',
//            'email'=>'sometimes|nullable|email',
            'email' => 'email|unique:vendors,email,' . $this->id,
            'password' => ['required', 'string', 'confirmed', 'min:8', new StrongPasswordRule()],
            'active' => 'required|in:inactive,active',
            'main_category_id' => 'required|exists:main_categories,id'
        ];
    }

    public function messages(): array
    {
        return [
            // Photo
            'photo.required' => __('validation/vendors.A photo is required.'),
            'photo.image' => __('validation/vendors.The photo must be an image.'),
            'photo.mimes' => __('validation/vendors.The photo must be of type: jpeg, png, jpg, gif, svg.'),

            // Name English
            'name_en.required' => __('validation/vendors.The English name is required.'),
            'name_en.string' => __('validation/vendors.The English name must be a string.'),
            'name_en.max' => __('validation/vendors.The English name may not be greater than 50 characters.'),

            // Name Arabic
            'name_ar.required' => __('validation/vendors.The Arabic name is required.'),
            'name_ar.string' => __('validation/vendors.The Arabic name must be a string.'),
            'name_ar.max' => __('validation/vendors.The Arabic name may not be greater than 50 characters.'),

            // Mobile
            'mobile.required' => __('validation/vendors.The mobile number is required.'),
            'mobile.digits' => __('validation/vendors.The mobile number must be 10 digits.'),
            'mobile.starts_with' => __('validation/vendors.The mobile number must start with 09.'),
            'mobile.unique' => __('validation/vendors.The mobile number has already been taken.'),

            // Address
            'address.string' => __('validation/vendors.The address must be a string.'),
            'address.max' => __('validation/vendors.The address may not be greater than 300 characters.'),

            // Email
            'email.email' => __('validation/vendors.The email must be a valid email address.'),
            'email.unique' => __('validation/vendors.The email has already been taken.'),

            // Password
            'password.required' => __('validation/vendors.The password is required.'),
            'password.string' => __('validation/vendors.The password must be a string.'),
            'password.confirmed' => __('validation/vendors.The password confirmation does not match.'),
            'password.min' => __('validation/vendors.The password must be at least 8 characters.'),

            // Active
            'active.required' => __('validation/vendors.The status is required.'),
            'active.in' => __('validation/vendors.The status must be either inactive or active.'),

            // Main Category
            'main_category_id.required' => __('validation/vendors.The main category is required.'),
            'main_category_id.exists' => __('validation/vendors.The selected main category does not exist.'),
        ];
    }

}
